# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from .builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseUserPermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserPermission']] = 'UserPermission'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserPermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserPermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseBranch(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Branch']] = 'Branch'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BranchActions[_PrismaModelT]':
        from .client import get_client

        return actions.BranchActions[_PrismaModelT](client or get_client(), cls)


class BaseProduct(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Product']] = 'Product'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ProductActions[_PrismaModelT]':
        from .client import get_client

        return actions.ProductActions[_PrismaModelT](client or get_client(), cls)


class BaseCategory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Category']] = 'Category'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CategoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.CategoryActions[_PrismaModelT](client or get_client(), cls)


class BaseStock(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Stock']] = 'Stock'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.StockActions[_PrismaModelT]':
        from .client import get_client

        return actions.StockActions[_PrismaModelT](client or get_client(), cls)


class BaseCustomer(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Customer']] = 'Customer'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CustomerActions[_PrismaModelT]':
        from .client import get_client

        return actions.CustomerActions[_PrismaModelT](client or get_client(), cls)


class BaseSale(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Sale']] = 'Sale'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SaleActions[_PrismaModelT]':
        from .client import get_client

        return actions.SaleActions[_PrismaModelT](client or get_client(), cls)


class BaseSaleItem(_PrismaModel):
    __prisma_model__: ClassVar[Literal['SaleItem']] = 'SaleItem'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SaleItemActions[_PrismaModelT]':
        from .client import get_client

        return actions.SaleItemActions[_PrismaModelT](client or get_client(), cls)


class BaseReturnSale(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ReturnSale']] = 'ReturnSale'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ReturnSaleActions[_PrismaModelT]':
        from .client import get_client

        return actions.ReturnSaleActions[_PrismaModelT](client or get_client(), cls)


class BaseReturnItem(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ReturnItem']] = 'ReturnItem'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ReturnItemActions[_PrismaModelT]':
        from .client import get_client

        return actions.ReturnItemActions[_PrismaModelT](client or get_client(), cls)


class BasePayment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Payment']] = 'Payment'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PaymentActions[_PrismaModelT]':
        from .client import get_client

        return actions.PaymentActions[_PrismaModelT](client or get_client(), cls)


class BaseJournalEntry(_PrismaModel):
    __prisma_model__: ClassVar[Literal['JournalEntry']] = 'JournalEntry'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.JournalEntryActions[_PrismaModelT]':
        from .client import get_client

        return actions.JournalEntryActions[_PrismaModelT](client or get_client(), cls)


class BaseJournalEntryLine(_PrismaModel):
    __prisma_model__: ClassVar[Literal['JournalEntryLine']] = 'JournalEntryLine'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.JournalEntryLineActions[_PrismaModelT]':
        from .client import get_client

        return actions.JournalEntryLineActions[_PrismaModelT](client or get_client(), cls)


class BaseAccount(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Account']] = 'Account'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AccountActions[_PrismaModelT]':
        from .client import get_client

        return actions.AccountActions[_PrismaModelT](client or get_client(), cls)


class BaseAccountTransfer(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AccountTransfer']] = 'AccountTransfer'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AccountTransferActions[_PrismaModelT]':
        from .client import get_client

        return actions.AccountTransferActions[_PrismaModelT](client or get_client(), cls)


class BaseBranchOrder(_PrismaModel):
    __prisma_model__: ClassVar[Literal['BranchOrder']] = 'BranchOrder'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BranchOrderActions[_PrismaModelT]':
        from .client import get_client

        return actions.BranchOrderActions[_PrismaModelT](client or get_client(), cls)


class BaseBranchOrderItem(_PrismaModel):
    __prisma_model__: ClassVar[Literal['BranchOrderItem']] = 'BranchOrderItem'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BranchOrderItemActions[_PrismaModelT]':
        from .client import get_client

        return actions.BranchOrderItemActions[_PrismaModelT](client or get_client(), cls)


class BaseAuditLog(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AuditLog']] = 'AuditLog'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AuditLogActions[_PrismaModelT]':
        from .client import get_client

        return actions.AuditLogActions[_PrismaModelT](client or get_client(), cls)


class BaseSystemInfo(_PrismaModel):
    __prisma_model__: ClassVar[Literal['SystemInfo']] = 'SystemInfo'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SystemInfoActions[_PrismaModelT]':
        from .client import get_client

        return actions.SystemInfoActions[_PrismaModelT](client or get_client(), cls)


class BaseBackup(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Backup']] = 'Backup'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BackupActions[_PrismaModelT]':
        from .client import get_client

        return actions.BackupActions[_PrismaModelT](client or get_client(), cls)


class BaseRevokedToken(_PrismaModel):
    __prisma_model__: ClassVar[Literal['RevokedToken']] = 'RevokedToken'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RevokedTokenActions[_PrismaModelT]':
        from .client import get_client

        return actions.RevokedTokenActions[_PrismaModelT](client or get_client(), cls)


class BaseSystemSetting(_PrismaModel):
    __prisma_model__: ClassVar[Literal['SystemSetting']] = 'SystemSetting'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SystemSettingActions[_PrismaModelT]':
        from .client import get_client

        return actions.SystemSettingActions[_PrismaModelT](client or get_client(), cls)


class BaseNotification(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Notification']] = 'Notification'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.NotificationActions[_PrismaModelT]':
        from .client import get_client

        return actions.NotificationActions[_PrismaModelT](client or get_client(), cls)


class BaseStockAdjustment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['StockAdjustment']] = 'StockAdjustment'

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.StockAdjustmentActions[_PrismaModelT]':
        from .client import get_client

        return actions.StockAdjustmentActions[_PrismaModelT](client or get_client(), cls)


