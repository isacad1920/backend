# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template enums.py.jinja --
from enum import Enum


class PermissionType(str, Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'

class CategoryStatus(str, Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'

class AccountType(str, Enum):
    ASSET = 'ASSET'
    LIABILITY = 'LIABILITY'
    EQUITY = 'EQUITY'
    REVENUE = 'REVENUE'
    EXPENSE = 'EXPENSE'
    OTHER = 'OTHER'

class BranchOrderStatus(str, Enum):
    PENDING = 'PENDING'
    APPROVED = 'APPROVED'
    SENT = 'SENT'
    RECEIVED = 'RECEIVED'
    CANCELLED = 'CANCELLED'

class Environment(str, Enum):
    DEV = 'DEV'
    STAGING = 'STAGING'
    PROD = 'PROD'

class BackupType(str, Enum):
    FULL = 'FULL'
    INCREMENTAL = 'INCREMENTAL'
    FILES = 'FILES'
    DB = 'DB'

class BackupStatus(str, Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'

class Role(str, Enum):
    ADMIN = 'ADMIN'
    MANAGER = 'MANAGER'
    CASHIER = 'CASHIER'
    INVENTORY_CLERK = 'INVENTORY_CLERK'
    ACCOUNTANT = 'ACCOUNTANT'

class AuditAction(str, Enum):
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'
    LOGIN = 'LOGIN'
    LOGOUT = 'LOGOUT'
    TRANSFER = 'TRANSFER'
    PAYMENT = 'PAYMENT'
    EXPENSE = 'EXPENSE'
    BACKUP = 'BACKUP'
    RESTORE = 'RESTORE'
    CONFIG = 'CONFIG'

class PaymentType(str, Enum):
    FULL = 'FULL'
    PARTIAL = 'PARTIAL'
    UNPAID = 'UNPAID'

class TransferStatus(str, Enum):
    PENDING = 'PENDING'
    SENT = 'SENT'
    RECEIVED_PARTIAL = 'RECEIVED_PARTIAL'
    RECEIVED_FULL = 'RECEIVED_FULL'
    CANCELLED = 'CANCELLED'

class ReturnStatus(str, Enum):
    PENDING = 'PENDING'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    COMPLETED = 'COMPLETED'

class ReturnType(str, Enum):
    REFUND_ONLY = 'REFUND_ONLY'
    EXCHANGE_ONLY = 'EXCHANGE_ONLY'
    EXCHANGE_WITH_PAYMENT = 'EXCHANGE_WITH_PAYMENT'
    EXCHANGE_WITH_REFUND = 'EXCHANGE_WITH_REFUND'

class Currency(str, Enum):
    USD = 'USD'
    SLSH = 'SLSH'
    ETB = 'ETB'

class CustomerType(str, Enum):
    INDIVIDUAL = 'INDIVIDUAL'
    COMPANY = 'COMPANY'

class CustomerStatus(str, Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    BLACKLISTED = 'BLACKLISTED'

class AuditSeverity(str, Enum):
    INFO = 'INFO'
    WARNING = 'WARNING'
    ERROR = 'ERROR'
    CRITICAL = 'CRITICAL'

class DebitCredit(str, Enum):
    DEBIT = 'DEBIT'
    CREDIT = 'CREDIT'

class AdjustmentType(str, Enum):
    INCREASE = 'INCREASE'
    DECREASE = 'DECREASE'
    RECOUNT = 'RECOUNT'
    DAMAGED = 'DAMAGED'
    EXPIRED = 'EXPIRED'
    THEFT = 'THEFT'
    RETURNED = 'RETURNED'

class AdjustmentReason(str, Enum):
    physical_count = 'physical_count'
    damage = 'damage'
    expiry = 'expiry'
    theft = 'theft'
    supplier_return = 'supplier_return'
    customer_return = 'customer_return'
    correction = 'correction'
    other = 'other'

