# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

import logging

# -- template client.py.jinja --
import warnings
from collections.abc import Callable, Sequence

# global imports for type checking
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing import (
    Any,
    Literal,
    LiteralString,
    Union,
    overload,
)

from pydantic import BaseModel

from . import actions, errors, models, types
from ._compat import model_parse, removeprefix
from ._constants import DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._metrics import Metrics
from ._raw_query import deserialize_raw_results
from ._types import BaseModelT, PrismaMethod
from .builder import QueryBuilder, dumps
from .engine import AbstractEngine, QueryEngine, TransactionId
from .generator.models import BinaryPaths, EngineType, OptionalValueFromEnvVar
from .types import DatasourceOverride, HttpConfig, MetricsFormat

__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('/Users/abdiqayum/Desktop/SOFinance/backend/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'darwin-arm64': '/Users/abdiqayum/.cache/prisma-python/binaries/5.4.2/ac9d7041ed77bcc8a8dbd2ab6616b39013829574/node_modules/prisma/query-engine-darwin-arm64'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})

RegisteredClient = Union['Prisma', Callable[[], 'Prisma']]
_registered_client: RegisteredClient | None = None


class UseClientDefault:
    """For certain parameters such as `timeout=...` we can make our intent more clear
    by typing the parameter with this class rather than using None, for example:

    ```py
    def connect(timeout: Union[int, timedelta, UseClientDefault] = UseClientDefault()) -> None: ...
    ```

    relays the intention more clearly than:

    ```py
    def connect(timeout: Union[int, timedelta, None] = None) -> None: ...
    ```

    This solution also allows us to indicate an "unset" state that is uniquely distinct
    from `None` which may be useful in the future.
    """


_USE_CLIENT_DEFAULT = UseClientDefault()


def load_env(*, override: bool = False, **kwargs: Any) -> None:
    """Load environemntal variables from dotenv files

    Loads from the following files relative to the current
    working directory:

    - .env
    - prisma/.env
    """
    from dotenv import load_dotenv

    load_dotenv('.env', override=override, **kwargs)
    load_dotenv('prisma/.env', override=override, **kwargs)


def register(client: RegisteredClient) -> None:
    """Register a client instance to be retrieved by `get_client()`

    This function _must_ only be called once, preferrably as soon as possible
    to avoid any potentially confusing errors with threads or processes.
    """
    global _registered_client

    if _registered_client is not None:
        raise errors.ClientAlreadyRegisteredError()

    if not isinstance(client, Prisma) and not callable(client):
        raise TypeError(
            f'Expected either a {Prisma} instance or a function that returns a {Prisma} but got {client} instead.'
        )

    _registered_client = client


def get_client() -> Prisma:
    """Get the registered client instance

    Raises errors.ClientNotRegisteredError() if no client instance has been registered.
    """
    registered = _registered_client
    if registered is None:
        raise errors.ClientNotRegisteredError() from None

    if isinstance(registered, Prisma):
        return registered

    client = registered()
    if not isinstance(client, Prisma):  # pyright: ignore[reportUnnecessaryIsInstance]
        raise TypeError(
            f'Registered function returned {client} instead of a {Prisma} instance.'
        )

    return client


class Prisma:
    user: actions.UserActions[models.User]
    userpermission: actions.UserPermissionActions[models.UserPermission]
    branch: actions.BranchActions[models.Branch]
    product: actions.ProductActions[models.Product]
    category: actions.CategoryActions[models.Category]
    stock: actions.StockActions[models.Stock]
    customer: actions.CustomerActions[models.Customer]
    sale: actions.SaleActions[models.Sale]
    saleitem: actions.SaleItemActions[models.SaleItem]
    returnsale: actions.ReturnSaleActions[models.ReturnSale]
    returnitem: actions.ReturnItemActions[models.ReturnItem]
    payment: actions.PaymentActions[models.Payment]
    journalentry: actions.JournalEntryActions[models.JournalEntry]
    journalentryline: actions.JournalEntryLineActions[models.JournalEntryLine]
    account: actions.AccountActions[models.Account]
    accounttransfer: actions.AccountTransferActions[models.AccountTransfer]
    branchorder: actions.BranchOrderActions[models.BranchOrder]
    branchorderitem: actions.BranchOrderItemActions[models.BranchOrderItem]
    auditlog: actions.AuditLogActions[models.AuditLog]
    systeminfo: actions.SystemInfoActions[models.SystemInfo]
    backup: actions.BackupActions[models.Backup]
    revokedtoken: actions.RevokedTokenActions[models.RevokedToken]
    systemsetting: actions.SystemSettingActions[models.SystemSetting]
    notification: actions.NotificationActions[models.Notification]
    stockadjustment: actions.StockAdjustmentActions[models.StockAdjustment]

    __slots__ = (
        'user',
        'userpermission',
        'branch',
        'product',
        'category',
        'stock',
        'customer',
        'sale',
        'saleitem',
        'returnsale',
        'returnitem',
        'payment',
        'journalentry',
        'journalentryline',
        'account',
        'accounttransfer',
        'branchorder',
        'branchorderitem',
        'auditlog',
        'systeminfo',
        'backup',
        'revokedtoken',
        'systemsetting',
        'notification',
        'stockadjustment',
        '__engine',
        '__copied',
        '_tx_id',
        '_datasource',
        '_log_queries',
        '_http_config',
        '_connect_timeout',
        '_active_provider',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        self.user = actions.UserActions[models.User](self, models.User)
        self.userpermission = actions.UserPermissionActions[models.UserPermission](self, models.UserPermission)
        self.branch = actions.BranchActions[models.Branch](self, models.Branch)
        self.product = actions.ProductActions[models.Product](self, models.Product)
        self.category = actions.CategoryActions[models.Category](self, models.Category)
        self.stock = actions.StockActions[models.Stock](self, models.Stock)
        self.customer = actions.CustomerActions[models.Customer](self, models.Customer)
        self.sale = actions.SaleActions[models.Sale](self, models.Sale)
        self.saleitem = actions.SaleItemActions[models.SaleItem](self, models.SaleItem)
        self.returnsale = actions.ReturnSaleActions[models.ReturnSale](self, models.ReturnSale)
        self.returnitem = actions.ReturnItemActions[models.ReturnItem](self, models.ReturnItem)
        self.payment = actions.PaymentActions[models.Payment](self, models.Payment)
        self.journalentry = actions.JournalEntryActions[models.JournalEntry](self, models.JournalEntry)
        self.journalentryline = actions.JournalEntryLineActions[models.JournalEntryLine](self, models.JournalEntryLine)
        self.account = actions.AccountActions[models.Account](self, models.Account)
        self.accounttransfer = actions.AccountTransferActions[models.AccountTransfer](self, models.AccountTransfer)
        self.branchorder = actions.BranchOrderActions[models.BranchOrder](self, models.BranchOrder)
        self.branchorderitem = actions.BranchOrderItemActions[models.BranchOrderItem](self, models.BranchOrderItem)
        self.auditlog = actions.AuditLogActions[models.AuditLog](self, models.AuditLog)
        self.systeminfo = actions.SystemInfoActions[models.SystemInfo](self, models.SystemInfo)
        self.backup = actions.BackupActions[models.Backup](self, models.Backup)
        self.revokedtoken = actions.RevokedTokenActions[models.RevokedToken](self, models.RevokedToken)
        self.systemsetting = actions.SystemSettingActions[models.SystemSetting](self, models.SystemSetting)
        self.notification = actions.NotificationActions[models.Notification](self, models.Notification)
        self.stockadjustment = actions.StockAdjustmentActions[models.StockAdjustment](self, models.StockAdjustment)

        # NOTE: if you add any more properties here then you may also need to forward
        # them in the `_copy()` method.
        self.__engine: AbstractEngine | None = None
        self._active_provider = 'postgresql'
        self._log_queries = log_queries
        self._datasource = datasource

        if isinstance(connect_timeout, int):
            message = (
                'Passing an int as `connect_timeout` argument is deprecated '
                'and will be removed in the next major release. '
                'Use a `datetime.timedelta` instance instead.'
            )
            warnings.warn(message, DeprecationWarning, stacklevel=2)
            connect_timeout = timedelta(seconds=connect_timeout)

        self._connect_timeout = connect_timeout
        self._http_config: HttpConfig = http or {}
        self._tx_id: TransactionId | None = None
        self.__copied: bool = False

        if use_dotenv:
            load_env()

        if auto_register:
            register(self)

    def __del__(self) -> None:
        # Note: as the transaction manager holds a reference to the original
        # client as well as the transaction client the original client cannot
        # be `free`d before the transaction is finished. So stopping the engine
        # here should be safe.
        if self.__engine is not None and not self.__copied:
            log.debug('unclosed client - stopping engine')
            engine = self.__engine
            self.__engine = None
            engine.stop()

    async def __aenter__(self) -> Prisma:
        await self.connect()
        return self

    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc: BaseException | None,
        exc_tb: TracebackType | None,
    ) -> None:
        if self.is_connected():
            await self.disconnect()

    def is_registered(self) -> bool:
        """Returns True if this client instance is registered"""
        try:
            return get_client() is self
        except errors.ClientNotRegisteredError:
            return False

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    async def connect(
        self,
        timeout: int | timedelta | UseClientDefault = _USE_CLIENT_DEFAULT,
    ) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if isinstance(timeout, UseClientDefault):
            timeout = self._connect_timeout

        if isinstance(timeout, int):
            message = (
                'Passing an int as `timeout` argument is deprecated '
                'and will be removed in the next major release. '
                'Use a `datetime.timedelta` instance instead.'
            )
            warnings.warn(message, DeprecationWarning, stacklevel=2)
            timeout = timedelta(seconds=timeout)

        if self.__engine is None:
            self.__engine = self._create_engine(dml_path=PACKAGED_SCHEMA_PATH)

        datasources: list[types.DatasourceOverride] | None = None
        if self._datasource is not None:
            ds = self._datasource.copy()
            ds.setdefault('name', 'db')
            datasources = [ds]

        await self.__engine.connect(
            timeout=timeout,
            datasources=datasources,
        )

    async def disconnect(self, timeout: float | timedelta | None = None) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            engine = self.__engine
            self.__engine = None
            if isinstance(timeout, float):
                message = (
                    'Passing a float as `timeout` argument is deprecated '
                    'and will be removed in the next major release. '
                    'Use a `datetime.timedelta` instead.'
                )
                warnings.warn(message, DeprecationWarning, stacklevel=2)
                timeout = timedelta(seconds=timeout)
            await engine.aclose(timeout=timeout)
            engine.stop(timeout=timeout)

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: type[BaseModelT],
    ) -> BaseModelT | None:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: type[BaseModelT] | None = None,
    ) -> BaseModelT | None | dict[str, Any]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[BaseModelT | dict[str, Any]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> list[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: type[BaseModelT],
    ) -> list[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: type[BaseModelT] | None = None,
    ) -> list[BaseModelT] | list[dict[str, Any]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: int | timedelta = DEFAULT_TX_MAX_WAIT,
        timeout: int | timedelta = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(client=self, max_wait=max_wait, timeout=timeout)

    def is_transaction(self) -> bool:
        """Returns True if the client is wrapped within a transaction"""
        return self._tx_id is not None

    @overload
    async def get_metrics(
        self,
        format: Literal['json'] = 'json',
        *,
        global_labels: dict[str, str] | None = None,
    ) -> Metrics:
        ...

    @overload
    async def get_metrics(
        self,
        format: Literal['prometheus'],
        *,
        global_labels: dict[str, str] | None = None,
    ) -> str:
        ...

    async def get_metrics(
        self,
        format: MetricsFormat = 'json',
        *,
        global_labels: dict[str, str] | None = None,
    ) -> str | Metrics:
        """Metrics give you a detailed insight into how the Prisma Client interacts with your database.

        You can retrieve metrics in either JSON or Prometheus formats.

        For more details see https://www.prisma.io/docs/concepts/components/prisma-client/metrics.
        """
        response = await self._engine.metrics(format=format, global_labels=global_labels)
        if format == 'prometheus':
            # For the prometheus format we return the response as-is
            assert isinstance(response, str)
            return response

        return model_parse(Metrics, response)

    # TODO: don't return Any
    async def _execute(
        self,
        method: PrismaMethod,
        arguments: dict[str, Any],
        model: type[BaseModel] | None = None,
        root_selection: list[str] | None = None
    ) -> Any:
        builder = QueryBuilder(
            method=method,
            model=model,
            arguments=arguments,
            root_selection=root_selection,
        )
        return await self._engine.query(builder.build(), tx_id=self._tx_id)

    def _copy(self) -> Prisma:
        """Return a new Prisma instance using the same engine process (if connected).

        This is only intended for private usage, there are no guarantees around this API.
        """
        new = Prisma(
            use_dotenv=False,
            http=self._http_config,
            datasource=self._datasource,
            log_queries=self._log_queries,
            connect_timeout=self._connect_timeout,
        )
        new.__copied = True

        if self.__engine is not None:
            new._engine = self.__engine

        return new

    def _create_engine(self, dml_path: Path = PACKAGED_SCHEMA_PATH) -> AbstractEngine:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine(dml_path=dml_path, log_queries=self._log_queries, **self._http_config)

        raise NotImplementedError(f'Unsupported engine type: {ENGINE_TYPE}')

    @property
    def _engine_class(self) -> type[AbstractEngine]:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine
        else:  # pragma: no cover
            raise RuntimeError(f'Unhandled engine type: {ENGINE_TYPE}')

    @property
    def _engine(self) -> AbstractEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine

    @_engine.setter
    def _engine(self, engine: AbstractEngine) -> None:
        self.__engine = engine

    def _make_sqlite_datasource(self) -> DatasourceOverride:
        return {
            'name': 'db',
            'url': self._make_sqlite_url(self._default_datasource['url']),
        }

    def _make_sqlite_url(self, url: str, *, relative_to: Path = SCHEMA_PATH.parent) -> str:
        url_path = removeprefix(removeprefix(url, 'file:'), 'sqlite:')
        if url_path == url:
            return url

        if Path(url_path).is_absolute():
            return url

        return f'file:{relative_to.joinpath(url_path).resolve()}'

    @property
    def _default_datasource(self) -> DatasourceOverride:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
        }


class TransactionManager:
    """Context manager for wrapping a Prisma instance within a transaction.

    This should never be created manually, instead it should be used
    through the Prisma.tx() method.
    """

    def __init__(self, *, client: Prisma, max_wait: int | timedelta, timeout: int | timedelta) -> None:
        self.__client = client

        if isinstance(max_wait, int):
            message = (
                'Passing an int as `max_wait` argument is deprecated '
                'and will be removed in the next major release. '
                'Use a `datetime.timedelta` instance instead.'
            )
            warnings.warn(message, DeprecationWarning, stacklevel=3)
            max_wait = timedelta(milliseconds=max_wait)

        self._max_wait = max_wait

        if isinstance(timeout, int):
            message = (
                'Passing an int as `timeout` argument is deprecated '
                'and will be removed in the next major release. '
                'Use a `datetime.timedelta` instance instead.'
            )
            warnings.warn(message, DeprecationWarning, stacklevel=3)
            timeout = timedelta(milliseconds=timeout)

        self._timeout = timeout

        self._tx_id: TransactionId | None = None

    async def start(self, *, _from_context: bool = False) -> Prisma:
        """Start the transaction and return the wrapped Prisma instance"""
        if self.__client.is_transaction():
            # if we were called from the context manager then the stacklevel
            # needs to be one higher to warn on the actual offending code
            warnings.warn(
                'The current client is already in a transaction. This can lead to surprising behaviour.',
                UserWarning,
                stacklevel=3 if _from_context else 2
            )

        tx_id = await self.__client._engine.start_transaction(
            content=dumps(
                {
                    'timeout': int(self._timeout.total_seconds() * 1000),
                    'max_wait': int(self._max_wait.total_seconds() * 1000),
                }
            ),
        )
        self._tx_id = tx_id
        client = self.__client._copy()
        client._tx_id = tx_id
        return client

    async def commit(self) -> None:
        """Commit the transaction to the database, this transaction will no longer be usable"""
        if self._tx_id is None:
            raise errors.TransactionNotStartedError()

        await self.__client._engine.commit_transaction(self._tx_id)

    async def rollback(self) -> None:
        """Do not commit the changes to the database, this transaction will no longer be usable"""
        if self._tx_id is None:
            raise errors.TransactionNotStartedError()

        await self.__client._engine.rollback_transaction(self._tx_id)

    async def __aenter__(self) -> Prisma:
        return await self.start(_from_context=True)

    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc: BaseException | None,
        exc_tb: TracebackType | None,
    ) -> None:
        if exc is None:
            log.debug('Transaction exited with no exception - commiting')
            await self.commit()
            return

        log.debug('Transaction exited with exc type: %s - rolling back', exc_type)

        try:
            await self.rollback()
        except Exception as exc:
            log.warning(
                'Encountered exc `%s` while rolling back a transaction. Ignoring and raising original exception',
                exc
            )


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    user: UserBatchActions
    userpermission: UserPermissionBatchActions
    branch: BranchBatchActions
    product: ProductBatchActions
    category: CategoryBatchActions
    stock: StockBatchActions
    customer: CustomerBatchActions
    sale: SaleBatchActions
    saleitem: SaleItemBatchActions
    returnsale: ReturnSaleBatchActions
    returnitem: ReturnItemBatchActions
    payment: PaymentBatchActions
    journalentry: JournalEntryBatchActions
    journalentryline: JournalEntryLineBatchActions
    account: AccountBatchActions
    accounttransfer: AccountTransferBatchActions
    branchorder: BranchOrderBatchActions
    branchorderitem: BranchOrderItemBatchActions
    auditlog: AuditLogBatchActions
    systeminfo: SystemInfoBatchActions
    backup: BackupBatchActions
    revokedtoken: RevokedTokenBatchActions
    systemsetting: SystemSettingBatchActions
    notification: NotificationBatchActions
    stockadjustment: StockAdjustmentBatchActions

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: list[str] = []
        self._active_provider = client._active_provider
        self.user = UserBatchActions(self)
        self.userpermission = UserPermissionBatchActions(self)
        self.branch = BranchBatchActions(self)
        self.product = ProductBatchActions(self)
        self.category = CategoryBatchActions(self)
        self.stock = StockBatchActions(self)
        self.customer = CustomerBatchActions(self)
        self.sale = SaleBatchActions(self)
        self.saleitem = SaleItemBatchActions(self)
        self.returnsale = ReturnSaleBatchActions(self)
        self.returnitem = ReturnItemBatchActions(self)
        self.payment = PaymentBatchActions(self)
        self.journalentry = JournalEntryBatchActions(self)
        self.journalentryline = JournalEntryLineBatchActions(self)
        self.account = AccountBatchActions(self)
        self.accounttransfer = AccountTransferBatchActions(self)
        self.branchorder = BranchOrderBatchActions(self)
        self.branchorderitem = BranchOrderItemBatchActions(self)
        self.auditlog = AuditLogBatchActions(self)
        self.systeminfo = SystemInfoBatchActions(self)
        self.backup = BackupBatchActions(self)
        self.revokedtoken = RevokedTokenBatchActions(self)
        self.systemsetting = SystemSettingBatchActions(self)
        self.notification = NotificationBatchActions(self)
        self.stockadjustment = StockAdjustmentBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(**kwargs)
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> Batch:
        return self

    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc: BaseException | None,
        exc_tb: TracebackType | None,
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: types.UserInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.User,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.User,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: types.UserInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: types.UserInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.User,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: types.UserInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.User,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.UserWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.User,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserPermissionBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserPermissionCreateInput,
        include: types.UserPermissionInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.UserPermission,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.UserPermissionCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.UserPermission,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserPermissionWhereUniqueInput,
        include: types.UserPermissionInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.UserPermission,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserPermissionUpdateInput,
        where: types.UserPermissionWhereUniqueInput,
        include: types.UserPermissionInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.UserPermission,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserPermissionWhereUniqueInput,
        data: types.UserPermissionUpsertInput,
        include: types.UserPermissionInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.UserPermission,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserPermissionUpdateManyMutationInput,
        where: types.UserPermissionWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.UserPermission,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.UserPermissionWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.UserPermission,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BranchBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BranchCreateInput,
        include: types.BranchInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Branch,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.BranchCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Branch,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BranchWhereUniqueInput,
        include: types.BranchInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Branch,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BranchUpdateInput,
        where: types.BranchWhereUniqueInput,
        include: types.BranchInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Branch,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BranchWhereUniqueInput,
        data: types.BranchUpsertInput,
        include: types.BranchInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Branch,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BranchUpdateManyMutationInput,
        where: types.BranchWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Branch,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.BranchWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Branch,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ProductBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ProductCreateInput,
        include: types.ProductInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Product,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.ProductCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Product,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ProductWhereUniqueInput,
        include: types.ProductInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Product,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ProductUpdateInput,
        where: types.ProductWhereUniqueInput,
        include: types.ProductInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Product,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ProductWhereUniqueInput,
        data: types.ProductUpsertInput,
        include: types.ProductInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Product,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ProductUpdateManyMutationInput,
        where: types.ProductWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Product,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.ProductWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Product,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CategoryBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CategoryCreateInput,
        include: types.CategoryInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Category,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.CategoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Category,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CategoryWhereUniqueInput,
        include: types.CategoryInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Category,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CategoryUpdateInput,
        where: types.CategoryWhereUniqueInput,
        include: types.CategoryInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Category,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CategoryWhereUniqueInput,
        data: types.CategoryUpsertInput,
        include: types.CategoryInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Category,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CategoryUpdateManyMutationInput,
        where: types.CategoryWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Category,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.CategoryWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Category,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class StockBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.StockCreateInput,
        include: types.StockInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Stock,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.StockCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Stock,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.StockWhereUniqueInput,
        include: types.StockInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Stock,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.StockUpdateInput,
        where: types.StockWhereUniqueInput,
        include: types.StockInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Stock,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.StockWhereUniqueInput,
        data: types.StockUpsertInput,
        include: types.StockInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Stock,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.StockUpdateManyMutationInput,
        where: types.StockWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Stock,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.StockWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Stock,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CustomerBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CustomerCreateInput,
        include: types.CustomerInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Customer,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.CustomerCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Customer,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CustomerWhereUniqueInput,
        include: types.CustomerInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Customer,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CustomerUpdateInput,
        where: types.CustomerWhereUniqueInput,
        include: types.CustomerInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Customer,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CustomerWhereUniqueInput,
        data: types.CustomerUpsertInput,
        include: types.CustomerInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Customer,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CustomerUpdateManyMutationInput,
        where: types.CustomerWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Customer,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.CustomerWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Customer,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class SaleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.SaleCreateInput,
        include: types.SaleInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Sale,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.SaleCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Sale,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.SaleWhereUniqueInput,
        include: types.SaleInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Sale,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.SaleUpdateInput,
        where: types.SaleWhereUniqueInput,
        include: types.SaleInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Sale,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.SaleWhereUniqueInput,
        data: types.SaleUpsertInput,
        include: types.SaleInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Sale,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.SaleUpdateManyMutationInput,
        where: types.SaleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Sale,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.SaleWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Sale,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class SaleItemBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.SaleItemCreateInput,
        include: types.SaleItemInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.SaleItem,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.SaleItemCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.SaleItem,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.SaleItemWhereUniqueInput,
        include: types.SaleItemInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.SaleItem,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.SaleItemUpdateInput,
        where: types.SaleItemWhereUniqueInput,
        include: types.SaleItemInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.SaleItem,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.SaleItemWhereUniqueInput,
        data: types.SaleItemUpsertInput,
        include: types.SaleItemInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.SaleItem,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.SaleItemUpdateManyMutationInput,
        where: types.SaleItemWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.SaleItem,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.SaleItemWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.SaleItem,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ReturnSaleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ReturnSaleCreateInput,
        include: types.ReturnSaleInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ReturnSale,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.ReturnSaleCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.ReturnSale,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ReturnSaleWhereUniqueInput,
        include: types.ReturnSaleInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ReturnSale,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ReturnSaleUpdateInput,
        where: types.ReturnSaleWhereUniqueInput,
        include: types.ReturnSaleInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ReturnSale,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ReturnSaleWhereUniqueInput,
        data: types.ReturnSaleUpsertInput,
        include: types.ReturnSaleInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ReturnSale,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ReturnSaleUpdateManyMutationInput,
        where: types.ReturnSaleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ReturnSale,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.ReturnSaleWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ReturnSale,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ReturnItemBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ReturnItemCreateInput,
        include: types.ReturnItemInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ReturnItem,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.ReturnItemCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.ReturnItem,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ReturnItemWhereUniqueInput,
        include: types.ReturnItemInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ReturnItem,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ReturnItemUpdateInput,
        where: types.ReturnItemWhereUniqueInput,
        include: types.ReturnItemInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ReturnItem,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ReturnItemWhereUniqueInput,
        data: types.ReturnItemUpsertInput,
        include: types.ReturnItemInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ReturnItem,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ReturnItemUpdateManyMutationInput,
        where: types.ReturnItemWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ReturnItem,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.ReturnItemWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ReturnItem,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PaymentBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PaymentCreateInput,
        include: types.PaymentInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Payment,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.PaymentCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Payment,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PaymentWhereUniqueInput,
        include: types.PaymentInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Payment,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PaymentUpdateInput,
        where: types.PaymentWhereUniqueInput,
        include: types.PaymentInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Payment,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PaymentWhereUniqueInput,
        data: types.PaymentUpsertInput,
        include: types.PaymentInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Payment,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PaymentUpdateManyMutationInput,
        where: types.PaymentWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Payment,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.PaymentWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Payment,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class JournalEntryBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.JournalEntryCreateInput,
        include: types.JournalEntryInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.JournalEntry,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.JournalEntryCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.JournalEntry,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.JournalEntryWhereUniqueInput,
        include: types.JournalEntryInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.JournalEntry,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.JournalEntryUpdateInput,
        where: types.JournalEntryWhereUniqueInput,
        include: types.JournalEntryInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.JournalEntry,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.JournalEntryWhereUniqueInput,
        data: types.JournalEntryUpsertInput,
        include: types.JournalEntryInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.JournalEntry,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.JournalEntryUpdateManyMutationInput,
        where: types.JournalEntryWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.JournalEntry,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.JournalEntryWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.JournalEntry,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class JournalEntryLineBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.JournalEntryLineCreateInput,
        include: types.JournalEntryLineInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.JournalEntryLine,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.JournalEntryLineCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.JournalEntryLine,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.JournalEntryLineWhereUniqueInput,
        include: types.JournalEntryLineInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.JournalEntryLine,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.JournalEntryLineUpdateInput,
        where: types.JournalEntryLineWhereUniqueInput,
        include: types.JournalEntryLineInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.JournalEntryLine,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.JournalEntryLineWhereUniqueInput,
        data: types.JournalEntryLineUpsertInput,
        include: types.JournalEntryLineInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.JournalEntryLine,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.JournalEntryLineUpdateManyMutationInput,
        where: types.JournalEntryLineWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.JournalEntryLine,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.JournalEntryLineWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.JournalEntryLine,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AccountBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AccountCreateInput,
        include: types.AccountInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Account,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.AccountCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Account,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AccountWhereUniqueInput,
        include: types.AccountInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Account,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AccountUpdateInput,
        where: types.AccountWhereUniqueInput,
        include: types.AccountInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Account,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AccountWhereUniqueInput,
        data: types.AccountUpsertInput,
        include: types.AccountInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Account,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AccountUpdateManyMutationInput,
        where: types.AccountWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Account,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.AccountWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Account,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AccountTransferBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AccountTransferCreateInput,
        include: types.AccountTransferInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.AccountTransfer,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.AccountTransferCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.AccountTransfer,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AccountTransferWhereUniqueInput,
        include: types.AccountTransferInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.AccountTransfer,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AccountTransferUpdateInput,
        where: types.AccountTransferWhereUniqueInput,
        include: types.AccountTransferInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.AccountTransfer,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AccountTransferWhereUniqueInput,
        data: types.AccountTransferUpsertInput,
        include: types.AccountTransferInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.AccountTransfer,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AccountTransferUpdateManyMutationInput,
        where: types.AccountTransferWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.AccountTransfer,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.AccountTransferWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.AccountTransfer,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BranchOrderBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BranchOrderCreateInput,
        include: types.BranchOrderInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.BranchOrder,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.BranchOrderCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.BranchOrder,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BranchOrderWhereUniqueInput,
        include: types.BranchOrderInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.BranchOrder,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BranchOrderUpdateInput,
        where: types.BranchOrderWhereUniqueInput,
        include: types.BranchOrderInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.BranchOrder,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BranchOrderWhereUniqueInput,
        data: types.BranchOrderUpsertInput,
        include: types.BranchOrderInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.BranchOrder,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BranchOrderUpdateManyMutationInput,
        where: types.BranchOrderWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.BranchOrder,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.BranchOrderWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.BranchOrder,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BranchOrderItemBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BranchOrderItemCreateInput,
        include: types.BranchOrderItemInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.BranchOrderItem,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.BranchOrderItemCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.BranchOrderItem,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BranchOrderItemWhereUniqueInput,
        include: types.BranchOrderItemInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.BranchOrderItem,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BranchOrderItemUpdateInput,
        where: types.BranchOrderItemWhereUniqueInput,
        include: types.BranchOrderItemInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.BranchOrderItem,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BranchOrderItemWhereUniqueInput,
        data: types.BranchOrderItemUpsertInput,
        include: types.BranchOrderItemInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.BranchOrderItem,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BranchOrderItemUpdateManyMutationInput,
        where: types.BranchOrderItemWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.BranchOrderItem,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.BranchOrderItemWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.BranchOrderItem,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AuditLogBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AuditLogCreateInput,
        include: types.AuditLogInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.AuditLog,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.AuditLogCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.AuditLog,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AuditLogWhereUniqueInput,
        include: types.AuditLogInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.AuditLog,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AuditLogUpdateInput,
        where: types.AuditLogWhereUniqueInput,
        include: types.AuditLogInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.AuditLog,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AuditLogWhereUniqueInput,
        data: types.AuditLogUpsertInput,
        include: types.AuditLogInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.AuditLog,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AuditLogUpdateManyMutationInput,
        where: types.AuditLogWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.AuditLog,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.AuditLogWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.AuditLog,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class SystemInfoBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.SystemInfoCreateInput,
        include: types.SystemInfoInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.SystemInfo,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.SystemInfoCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.SystemInfo,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.SystemInfoWhereUniqueInput,
        include: types.SystemInfoInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.SystemInfo,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.SystemInfoUpdateInput,
        where: types.SystemInfoWhereUniqueInput,
        include: types.SystemInfoInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.SystemInfo,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.SystemInfoWhereUniqueInput,
        data: types.SystemInfoUpsertInput,
        include: types.SystemInfoInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.SystemInfo,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.SystemInfoUpdateManyMutationInput,
        where: types.SystemInfoWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.SystemInfo,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.SystemInfoWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.SystemInfo,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BackupBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BackupCreateInput,
        include: types.BackupInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Backup,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.BackupCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Backup,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BackupWhereUniqueInput,
        include: types.BackupInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Backup,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BackupUpdateInput,
        where: types.BackupWhereUniqueInput,
        include: types.BackupInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Backup,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BackupWhereUniqueInput,
        data: types.BackupUpsertInput,
        include: types.BackupInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Backup,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BackupUpdateManyMutationInput,
        where: types.BackupWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Backup,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.BackupWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Backup,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class RevokedTokenBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.RevokedTokenCreateInput,
        include: types.RevokedTokenInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.RevokedToken,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.RevokedTokenCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.RevokedToken,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.RevokedTokenWhereUniqueInput,
        include: types.RevokedTokenInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.RevokedToken,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.RevokedTokenUpdateInput,
        where: types.RevokedTokenWhereUniqueInput,
        include: types.RevokedTokenInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.RevokedToken,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.RevokedTokenWhereUniqueInput,
        data: types.RevokedTokenUpsertInput,
        include: types.RevokedTokenInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.RevokedToken,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.RevokedTokenUpdateManyMutationInput,
        where: types.RevokedTokenWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.RevokedToken,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.RevokedTokenWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.RevokedToken,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class SystemSettingBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.SystemSettingCreateInput,
        include: types.SystemSettingInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.SystemSetting,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.SystemSettingCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.SystemSetting,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.SystemSettingWhereUniqueInput,
        include: types.SystemSettingInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.SystemSetting,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.SystemSettingUpdateInput,
        where: types.SystemSettingWhereUniqueInput,
        include: types.SystemSettingInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.SystemSetting,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.SystemSettingWhereUniqueInput,
        data: types.SystemSettingUpsertInput,
        include: types.SystemSettingInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.SystemSetting,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.SystemSettingUpdateManyMutationInput,
        where: types.SystemSettingWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.SystemSetting,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.SystemSettingWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.SystemSetting,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class NotificationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.NotificationCreateInput,
        include: types.NotificationInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Notification,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.NotificationCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.Notification,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.NotificationWhereUniqueInput,
        include: types.NotificationInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Notification,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.NotificationUpdateInput,
        where: types.NotificationWhereUniqueInput,
        include: types.NotificationInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Notification,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.NotificationWhereUniqueInput,
        data: types.NotificationUpsertInput,
        include: types.NotificationInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Notification,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.NotificationUpdateManyMutationInput,
        where: types.NotificationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Notification,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.NotificationWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Notification,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class StockAdjustmentBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.StockAdjustmentCreateInput,
        include: types.StockAdjustmentInclude | None = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.StockAdjustment,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: list[types.StockAdjustmentCreateWithoutRelationsInput],
        *,
        skip_duplicates: bool | None = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            method='create_many',
            model=models.StockAdjustment,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.StockAdjustmentWhereUniqueInput,
        include: types.StockAdjustmentInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.StockAdjustment,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.StockAdjustmentUpdateInput,
        where: types.StockAdjustmentWhereUniqueInput,
        include: types.StockAdjustmentInclude | None = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.StockAdjustment,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.StockAdjustmentWhereUniqueInput,
        data: types.StockAdjustmentUpsertInput,
        include: types.StockAdjustmentInclude | None = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.StockAdjustment,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.StockAdjustmentUpdateManyMutationInput,
        where: types.StockAdjustmentWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.StockAdjustment,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: types.StockAdjustmentWhereInput | None = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.StockAdjustment,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma